@page "/"
@page "/snake"
@using Microsoft.AspNetCore.Components;
@using SnakeGameBlazor.Data;
@using SnakeGameBlazor.Constants;
@using System.Linq;

<PageTitle>Snake</PageTitle>
<div class="containter" @onkeydown="ChangeDirection" tabindex="0">
    <div class="">
        
        <div class="row align-items-center">
            <div class="col-6">
                <table style="border-collapse: collapse; border-spacing: 0;">
                @for (int i = _gridSize; i > 0; i--)
                {
                    <tr>
                        @for (int j = 0; j < _gridSize; j++)
                        {
                            <td style="padding:0">
                                <img src=@("/images/"+ _cells.Find(c => c.x == j && c.y == i-1).Color) class="img-fluid m-0 p-0 g-0" style="margin: 0 auto;display:block;"/>
                            </td>
                        }
                    </tr>
                }
                </table>
            </div>
            
            <div class="col-6 text-center">
                <br />
                <h3>Level @_level</h3>
                <br /><br />
                <h1 class="mb-0 fw-bold">SCORE</h1>
                <h1 class="mt-0 fw-bold">@_score</h1>
                <h3 class="mt-0">Speed: @(Math.Abs(_snake.Speed - 250))</h3>
                <br /><br />
                <h3>Next level for:</h3>
                <h3>@(_winningScore - _score)</h3>
            </div>
        </div>
    </div>
    <br /><br />
</div>

@code {
    private List<Cell> _cells = new List<Cell>();
    private Snake _snake = new Snake();
    private List<Cell> _edge = new List<Cell>();
    private Cell _kebabCell = new Cell();

    private int _gridSize = 13;
    private int _kebabFrequency = 10;

    private bool _isRunning;
    private string _direction;
    private int _level = 1;
    private int _score;
    private int _winningScore = 30;
    private int _movesCount;
    private int _kebabTimeLeft;
    private bool _turningEnabled = true;


    async Task PlaySnake()
    {
        _isRunning = true;

        while (_isRunning)
        {
            await Task.Delay(_snake.Speed);

            await NextAction();

            StateHasChanged();
        }
    }

    protected async override void OnInitialized()
    {
        await PreparePlayingBoard();
    }

    private async Task PreparePlayingBoard()
    {
        InitializeCells();
        await MakeCellsGreen();
        MakeEdgeBlack();
        _snake.InitializeSnake(_gridSize, _cells);
        SpawnFood(GridColors.Beer);
        _turningEnabled = true;
        StateHasChanged();
    }

    async Task NextAction()
    {
        _snake.MoveSnakeBody();

        _snake.MoveSnakeHead(_direction);

        CheckSnakeHeadPosition();

        if (_isRunning)
        {

            for (int i = 1; i < _snake.Length; i++)
            {
                _cells.Find(c => c.x == _snake.SnakeCells[i].x && c.y == _snake.SnakeCells[i].y).Color = GridColors.Blue;
            }

            _snake.ChangeSnakeHeadPicture(_cells);

            _movesCount++;
            DeleteKebabOrDecreaseKebabTimeLeft();
        }
    }

    private async void ChangeDirection(KeyboardEventArgs e)
    {
        if (_turningEnabled)
        {
            switch (e.Key)
            {
                case Directions.ArrowUp:
                    if (_snake.HeadDirection != Directions.Down || !_isRunning)
                    {
                        _direction = Directions.Up;
                    }
                    break;

                case Directions.ArrowDown:
                    if (_snake.HeadDirection != Directions.Up || !_isRunning)
                    {
                        _direction = Directions.Down;
                    }
                    break;

                case Directions.ArrowLeft:
                    if (_snake.HeadDirection != Directions.Right || !_isRunning)
                    {
                        _direction = Directions.Left;
                    }
                    break;

                case Directions.ArrowRight:
                    if (_snake.HeadDirection != Directions.Left || !_isRunning)
                    {
                        _direction = Directions.Right;
                    }
                    break;
            }

            if (!_isRunning)
                await PlaySnake();
        }

    }

    private async Task MakeCellsGreen()
    {
        var cells = _cells.Where(c => c.x >= 1 && c.y >= 1 && c.x <= _gridSize - 2 && c.y <= _gridSize - 2);
        foreach (var cell in cells)
        {
            cell.Color = GridColors.Green;
        }

    }

    private void InitializeCells()
    {
        if (_cells.Count > 0)
        {
            _cells.RemoveAll(c => c.x >= -1);
        }

        for (int i = 0; i < _gridSize; i++)
        {
            for (int j = 0; j < _gridSize; j++)
            {
                _cells.Add(new Cell
                    {
                        x = i,
                        y = j,
            });
            }
        }
    }

    private void MakeEdgeBlack()
    {
        var cells = _cells.Where(c => c.x == 0 || c.y == 0 || c.x == _gridSize-1 || c.y == _gridSize-1);
        foreach (var cell in cells)
        {
            cell.Color = GridColors.Black;
        }
    }

    private async void CheckSnakeHeadPosition()
    {
        switch (_cells.Find(c => c.x == _snake.Head.x && c.y == _snake.Head.y).Color)
        {
            case GridColors.Blue:
            case GridColors.Black:
            case GridColors.EyesDown:
            case GridColors.EyesUp:
            case GridColors.EyesLeft:
            case GridColors.EyesRight:
                GameOver();
                break;

            case GridColors.Beer:
                _snake.MakeSnakeLonger();
                _score++;
                _snake.Speed -= 2;

                if (_score>=_winningScore)
                {
                    WinLevel();
                }
                else if (_score%_kebabFrequency == 0)
                {
                    SpawnFood(GridColors.Kebab);
                    _kebabTimeLeft = 2*_gridSize;
                }
                SpawnFood(GridColors.Beer);
                break;

            case GridColors.Kebab:
                _score += 10;
                _cells.Find(c => c.x == _snake.Tail.x && c.y == _snake.Tail.y).Color = GridColors.Green;
                break;

            case GridColors.Green:
                _cells.Find(c => c.x == _snake.Tail.x && c.y == _snake.Tail.y).Color = GridColors.Green;
                break;
        }
    }

    private void SpawnFood(string foodName)
    {
        var generator = new Random();
        var foodCell = new Cell
            {
                x = generator.Next(1, _gridSize-2),
                y = generator.Next(1, _gridSize-2)
            };
        while (_snake.SnakeCells.Any(snakeCell => snakeCell.x == foodCell.x && snakeCell.y == foodCell.y) || _cells.Find(c => c.x == foodCell.x && c.y == foodCell.y).Color == GridColors.Beer)
        {
            foodCell.x = generator.Next(1, _gridSize - 2);
            foodCell.y = generator.Next(1, _gridSize - 2);
        }

        _cells.Find(c => c.x == foodCell.x && c.y == foodCell.y).Color = foodName;

        if (foodName == GridColors.Kebab)
        {
            _kebabCell.x = foodCell.x;
            _kebabCell.y = foodCell.y;
        }
    }

    private async void GameOver()
    {
        _isRunning = false;
        _turningEnabled = false;
        await FlashSnake();
        _snake.Length = 3;
        _snake.Speed = 250;
        _level = 1;
        _winningScore = 30;
        _gridSize = 13;
        _score = 0;
        PreparePlayingBoard();
        StateHasChanged();
        _turningEnabled = true;
    }

    private async Task FlashSnake()
    {
        for (int i = 0; i < 4; i++)
        {
            _snake.ChangeSnakeColor(GridColors.Red, _cells);
            StateHasChanged();
            await Task.Delay(150);

            _snake.ChangeSnakeColor(GridColors.Blue, _cells);
            StateHasChanged();
            await Task.Delay(150);
        }
    }

    private void DeleteKebabOrDecreaseKebabTimeLeft()
    {
        if (_cells.Any(c => c.Color == GridColors.Kebab))
        {
            if (_kebabTimeLeft > 0)
            {
                _kebabTimeLeft--;
            }else
            {
                _cells.Find(c => c.x == _kebabCell.x && c.y == _kebabCell.y).Color = GridColors.Green;
            }
        }
    }

    private async Task WinLevel()
    {
        _isRunning = false;
        _turningEnabled = false;
        await SnakeGoingIntoHoleAnimation();

        for (int i = 0; i < 3; i++)
        {
            await MakeCellsGreen();
            StateHasChanged();
            await WriteCongrats();
            StateHasChanged();
        }

        await Task.Delay(1000);
        await CountdownAnimation();
        _level++;
        _score = _winningScore;
        _winningScore = 3 * _winningScore;
        _gridSize = Convert.ToInt32(Math.Round(1.5 * _gridSize, 0,mode: MidpointRounding.ToPositiveInfinity));
        PreparePlayingBoard();
    }

    private async Task SnakeGoingIntoHoleAnimation()
    {
        _cells.Find(c => c.x == _snake.Head.x && c.y == _snake.Head.y).Color = GridColors.Hole;
        switch (_snake.HeadDirection)
        {
            case Directions.Up:
                _cells.Find(c => c.x == _snake.SnakeCells[1].x && c.y == _snake.SnakeCells[1].y).Color = GridColors.EyesUp;
                break;

            case Directions.Down:
                _cells.Find(c => c.x == _snake.SnakeCells[1].x && c.y == _snake.SnakeCells[1].y).Color = GridColors.EyesDown;
                break;

            case Directions.Left:
                _cells.Find(c => c.x == _snake.SnakeCells[1].x && c.y == _snake.SnakeCells[1].y).Color = GridColors.EyesLeft;
                break;

            case Directions.Right:
                _cells.Find(c => c.x == _snake.SnakeCells[1].x && c.y == _snake.SnakeCells[1].y).Color = GridColors.EyesRight;
                break;
        }
        StateHasChanged();
        await Task.Delay(2000);

        _cells.Find(c => c.x == _snake.SnakeCells[1].x && c.y == _snake.SnakeCells[1].y).Color = GridColors.Blue;
        for (int i = _snake.Length-1; i >0 ; i--)
        {
            _cells.Find(c => c.x == _snake.SnakeCells[i].x && c.y == _snake.SnakeCells[i].y).Color = GridColors.Green;
            StateHasChanged();
            await Task.Delay(100);
        }
    }

    private async Task WriteCongrats()
    {
        var middle = new Cell(){
            x = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity)),
            y = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity))
        };
        string inscription = "CONGRATS";

        for (int i = -4, j=0; i < 4; i++, j++)
        {
            _cells.Find(c => c.x == middle.x + i && c.y == middle.y+4).Color = inscription[j].ToString() + ".png";
            StateHasChanged();
            await Task.Delay(80);
        }
        _cells.Find(c => c.x == middle.x + 4 && c.y == middle.y + 4).Color = Letters.ExclamationMark;
        StateHasChanged();
        await Task.Delay(150);

    }

    private async Task CountdownAnimation()
    {
        var middle = new Cell(){
            x = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity)),
            y = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity))
        };

        string inscription = "LEVEL";

        for (int i = -5, j = 0; i < 0; i++, j++)
        {
            _cells.Find(c => c.x == middle.x + i && c.y == middle.y + 2).Color = inscription[j].ToString() + ".png";
        }
        _cells.Find(c => c.x == middle.x + 1 && c.y == middle.y + 2).Color = "2.png";

        inscription = "FOR";

        for (int i = 3, j = 0; i < 6; i++, j++)
        {
            _cells.Find(c => c.x == middle.x + i && c.y == middle.y + 2).Color = inscription[j].ToString() + ".png";
        }

        StateHasChanged();
        await Task.Delay(2000);

        var cellsToChange = new List<Cell>()
        {
            new Cell {x = middle.x, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-1, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y , Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-3, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-4, Color = GridColors.Yellow}
        };

        foreach (var cell in cellsToChange)
        {
            _cells.Find(c => c.x == cell.x && c.y == cell.y).Color = cell.Color;
        }

        StateHasChanged();
        await Task.Delay(1000);
        cellsToChange.RemoveAll(c => c.x >= -1);

        cellsToChange.AddRange(new List<Cell>()
        {
            new Cell {x = middle.x, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-1, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-3, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-3, Color = GridColors.Green},
        });

        foreach (var cell in cellsToChange)
        {
            _cells.Find(c => c.x == cell.x && c.y == cell.y).Color = cell.Color;
        }
        StateHasChanged();
        await Task.Delay(1000);
        cellsToChange.RemoveAll(c => c.x >= -1);

        cellsToChange.AddRange(new List<Cell>()
        {
            new Cell {x = middle.x-1, y = middle.y, Color = GridColors.Green},
            new Cell {x = middle.x, y = middle.y, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-2, Color = GridColors.Green},
            new Cell {x = middle.x, y = middle.y-2, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-2, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-3, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-4, Color = GridColors.Green},
            new Cell {x = middle.x, y = middle.y-4, Color = GridColors.Green},
            new Cell {x = middle.x+1, y = middle.y-3, Color = GridColors.Yellow},
            
        });

        foreach (var cell in cellsToChange)
        {
            _cells.Find(c => c.x == cell.x && c.y == cell.y).Color = cell.Color;
        }

        StateHasChanged();
        await Task.Delay(1000);

        MakeCellsGreen();
        StateHasChanged();
    }
}
