@page "/snake"
@using Microsoft.AspNetCore.Components;
@using SnakeGameBlazor.Data;
@using SnakeGameBlazor.Constants;

<PageTitle>Snake</PageTitle>
<div class="containter" @onkeydown="ChangeDirection" tabindex="0">

    <h1>Snake</h1>

    <p>Current direction: @_direction</p>

    <div class="container">
        <div class="col-4 custom-no-spaces">
            @for (int i = _gridSize; i > 0; i--)
            {
                <div class="row">
                    @for (int j = 0; j < _gridSize; j++)
                    {
                        <div class="col p-0 m-0">
                            <img src=@("/images/"+ _cells[j,i-1] + ".png") class="img-fluid custom-no-spaces" />
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _direction;
    private string _snakeHeadDirection;
    private const int _gridSize = 10;
    private string[,] _cells = new string[_gridSize, _gridSize];
    private bool _isRunning;
    private Snake _snake = new Snake();


    async Task PlaySnake()
    {
        _isRunning = true;

        while (_isRunning)
        {
            await Task.Delay(150);

            await NextAction();

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        for (int i = 0; i < _gridSize; i++)
        {
            for (int j = 0; j < _gridSize; j++)
            {
                _cells[i, j] = GridColors.Green;
            }
        }
        InitializeSnake();
        SpawnFood();
    }

    async Task NextAction()
    {
        MoveSnakeBody();

        MoveSnakeHead();

        CheckSnakeHeadPosition();

        if (_isRunning)
        {
            foreach (var cell in _snake.Cells)
            {
                _cells[cell.x, cell.y] = GridColors.Blue;
            }
        }
    }

    private async void ChangeDirection(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case Directions.ArrowUp:
                if (_snakeHeadDirection != Directions.Down || !_isRunning)
                {
                    _direction = Directions.Up;
                }
                break;

            case Directions.ArrowDown:
                if (_snakeHeadDirection != Directions.Up || !_isRunning)
                {
                    _direction = Directions.Down;
                }
                break;

            case Directions.ArrowLeft:
                if (_snakeHeadDirection != Directions.Right || !_isRunning)
                {
                    _direction = Directions.Left;
                }
                break;

            case Directions.ArrowRight:
                if (_snakeHeadDirection != Directions.Left || !_isRunning)
                {
                    _direction = Directions.Right;
                }
                break;
        }

        if (!_isRunning)
            await PlaySnake();
    }

    private void InitializeSnake()
    {
        if (_snake.Cells.Count != 0)
        {
            for (int i = _snake.Cells.Count; i > 0; i--)
            {
                _snake.Cells.RemoveAt(0);
            }
        }
        _snake.Length = 3;
        _snake.Head.x = _gridSize / 2;
        _snake.Head.y = _gridSize / 2;

        for (int i = 0; i < _snake.Length; i++)
        {
            _snake.Cells.Add(new Cell
            {
                x = _gridSize / 2,
                y = _gridSize / 2
            });

            _cells[_gridSize / 2, _gridSize / 2] = GridColors.Blue;
        }

        _snake.Tail.x = _gridSize / 2 + _snake.Length - 1;
        _snake.Tail.y = _gridSize / 2;
    }

    private void MoveSnakeBody()
    {
        _snake.Tail.x = _snake.Cells[_snake.Length - 1].x;
        _snake.Tail.y = _snake.Cells[_snake.Length - 1].y;

        for (int i = _snake.Length - 1; i > 0; i--)
        {
            _snake.Cells[i].x = _snake.Cells[i - 1].x;
            _snake.Cells[i].y = _snake.Cells[i - 1].y;
        }
    }

    private void MoveSnakeHead()
    {
        switch (_direction)
        {
            case Directions.Up:
                _snake.Cells[0].y = _snake.Cells[0].y + 1;
                _snakeHeadDirection = Directions.Up;
                break;

            case Directions.Down:
                _snake.Cells[0].y = _snake.Cells[0].y - 1;
                _snakeHeadDirection = Directions.Down;
                break;

            case Directions.Left:
                _snake.Cells[0].x = _snake.Cells[0].x - 1;
                _snakeHeadDirection = Directions.Left;
                break;

            case Directions.Right:
                _snake.Cells[0].x = _snake.Cells[0].x + 1;
                _snakeHeadDirection = Directions.Right;
                break;
        }
        _snake.Head.x = _snake.Cells[0].x;
        _snake.Head.y = _snake.Cells[0].y;

    }

    private async void CheckSnakeHeadPosition()
    {
        switch (_cells[_snake.Head.x, _snake.Head.y])
        {
            case GridColors.Blue:
                GameOver();
                break;

            case GridColors.Beer:
                MakeSnakeLonger();
                SpawnFood();
                break;

            case GridColors.Green:
                _cells[_snake.Tail.x, _snake.Tail.y] = GridColors.Green;
                break;
        }
    }

    private void SpawnFood()
    {
        var generator = new Random();
        var foodCell = new Cell
            {
                x = generator.Next(0, _gridSize-1),
                y = generator.Next(0, _gridSize-1)
            };
        while (_snake.Cells.Any(snakeCell => snakeCell.x == foodCell.x && snakeCell.y == foodCell.y))
        {
            foodCell.x = generator.Next(0, 9);
            foodCell.y = generator.Next(0, 9);
        }
        _cells[foodCell.x, foodCell.y] = GridColors.Beer;
    }

    private void MakeSnakeLonger()
    {
        _snake.Cells.Add(new Cell
            {
                x = _snake.Tail.x,
                y = _snake.Tail.y
            });
        _snake.Length++;
    }

    private async void GameOver()
    {
        _isRunning = false;
        await FlashSnake();
        OnInitialized();
        StateHasChanged();
    }

    private async Task FlashSnake()
    {
        for (int i = 0; i < 4; i++)
        {
            MakeSnakeRed();
            StateHasChanged();
            await Task.Delay(200);

            MakeSnakeBlue();
            StateHasChanged();
            await Task.Delay(200);
        }
    }

    private void MakeSnakeRed()
    {
        foreach (var cell in _snake.Cells)
        {
            _cells[cell.x, cell.y] = GridColors.Red;
        }
        _cells[_snake.Tail.x, _snake.Tail.y] = GridColors.Red;
    }

    private void MakeSnakeBlue()
    {
        foreach (var cell in _snake.Cells)
        {
            _cells[cell.x, cell.y] = GridColors.Blue;
        }
        _cells[_snake.Tail.x, _snake.Tail.y] = GridColors.Blue;
    } 
}
