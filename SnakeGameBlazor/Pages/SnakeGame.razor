@page "/"
@page "/snake"
@using Microsoft.AspNetCore.Components;
@using SnakeGameBlazor.Data;
@using SnakeGameBlazor.Constants;
@using System.Linq;

<PageTitle>Snake</PageTitle>
@{
    int BoardSize = 800;
}
<div class="container fluid">
    <div class="row align-items-center" @onkeydown="ChangeDirection" tabindex="0">
        <div class="container col-8">
            @for (int i = _gridSize; i > 0; i--)
            {
                <div class="row m-0" style="max-height:@(BoardSize/_gridSize + "px")">
                    @for (int j = 0; j < _gridSize; j++)
                    {
                        <div class="col p-0" style="max-width:@(BoardSize/_gridSize + "px")">
                            <img src=@("/images/"+ _cells.Get(j, i-1).Color) class="img-fluid"/>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col-4 text-center">
            <br />
            <h3>Level @_level</h3>
            <br /><br />
            <h1 class="mb-0 fw-bold">SCORE</h1>
            <h1 class="mt-0 fw-bold">@_score</h1>
            <h3 class="mt-0">Speed: @(Math.Abs(_snake.Speed - Snake.InitialSpeed))</h3>
            <br /><br />
            <h3>Next level for:</h3>
            <h3>@(_winningScore - _score)</h3>
        </div>
    </div>
</div>
@code {
    private ArrayCells _cells = new ArrayCells(_initialGridSize);
    //private ListCells _cells = new ListCells(_initialGridSize);
    private Snake _snake = new Snake(3, 300);
    private Cell _kebabCell = new Cell();
    private static Random _randomGenerator = new Random();
    private const int _initialGridSize = 13;
    private const int _initialWinningScore = 10;
    private int _kebabChance = 50;
    private int _gridSize = _initialGridSize;
    private int _winningScore = _initialWinningScore;
    private int _score;

    private int _level = 1;

    private bool _isRunning;
    private string _direction;
    private int _movesCount;
    private int _kebabTimeLeft;
    private bool _turningEnabled = true;


    async Task PlaySnake()
    {
        _isRunning = true;

        while (_isRunning)
        {
            await Task.Delay(_snake.Speed);

            await NextAction();

            StateHasChanged();
        }
    }

    protected async override void OnInitialized()
    {
        await PreparePlayingBoard();
    }

    private async Task PreparePlayingBoard()
    {
        try
        {
            await _cells.Initialize(_gridSize);
            _cells.MakeEdgeBlack();
            _snake.InitializeSnake(_gridSize, _cells);
            SpawnFood(GridColors.Beer);
            _turningEnabled = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        
    }

    async Task NextAction()
    {
        _snake.MoveBody();
        _snake.MoveHead(_direction);
        CheckSnakeHeadPosition();

        if (_isRunning)
        {
            _snake.ChangeSnakeColor(GridColors.Blue, _cells);
            _snake.ChangeSnakeHeadPicture(_cells);
            _movesCount++;
            DeleteKebabOrDecreaseKebabTimeLeft();
        }
    }

    private async void ChangeDirection(KeyboardEventArgs e)
    {
        if (_turningEnabled)
        {
            switch (e.Key)
            {
                case Directions.ArrowUp:
                    if (_snake.HeadDirection != Directions.Down || !_isRunning)
                    {
                        _direction = Directions.Up;
                    }
                    break;

                case Directions.ArrowDown:
                    if (_snake.HeadDirection != Directions.Up || !_isRunning)
                    {
                        _direction = Directions.Down;
                    }
                    break;

                case Directions.ArrowLeft:
                    if (_snake.HeadDirection != Directions.Right || !_isRunning)
                    {
                        _direction = Directions.Left;
                    }
                    break;

                case Directions.ArrowRight:
                    if (_snake.HeadDirection != Directions.Left || !_isRunning)
                    {
                        _direction = Directions.Right;
                    }
                    break;
            }

            if (!_isRunning)
                await PlaySnake();
        }

    }

    private async void CheckSnakeHeadPosition()
    {
        switch (_cells.Get(_snake.Head.x, _snake.Head.y).Color)
        {
            case GridColors.Blue:
            case GridColors.Black:
            case GridColors.EyesDown:
            case GridColors.EyesUp:
            case GridColors.EyesLeft:
            case GridColors.EyesRight:
                GameOver();
                break;

            case GridColors.Beer:
                _snake.MakeSnakeLonger();
                _score++;
                _snake.Speed -= 2;

                if (_score>=_winningScore)
                {
                    WinLevel();
                }
                else if (ThePlayerIsLucky())
                {
                    SpawnFood(GridColors.Kebab);
                    _kebabTimeLeft = 2*_gridSize;
                }
                SpawnFood(GridColors.Beer);
                break;

            case GridColors.Kebab:
                _score += 10;
                _snake.HideTail(_cells);
                break;

            case GridColors.Green:
                _snake.HideTail(_cells);
                break;
        }
    }

    private void SpawnFood(string foodName)
    {
        var foodCell = new Cell
            {
                x = _randomGenerator.Next(1, _gridSize-2),
                y = _randomGenerator.Next(1, _gridSize - 2)
            };
        while (_snake.SnakeCells.Any(snakeCell => snakeCell.x == foodCell.x && snakeCell.y == foodCell.y) || _cells.Get(foodCell.x, foodCell.y).Color == GridColors.Beer)
        {
            foodCell.x = _randomGenerator.Next(1, _gridSize - 2);
            foodCell.y = _randomGenerator.Next(1, _gridSize - 2);
        }

        _cells.Get(foodCell.x, foodCell.y).Color = foodName;

        if (foodName == GridColors.Kebab)
        {
            _kebabCell.x = foodCell.x;
            _kebabCell.y = foodCell.y;
        }
    }

    private bool ThePlayerIsLucky()
    {
        var result = _randomGenerator.Next(1,100);
        if (result <= _kebabChance)
        {
            return true;
        }else
        {
            return false;
        }
    }

    private async void GameOver()
    {
        _snake.HideTail(_cells);
        _isRunning = false;
        _turningEnabled = false;
        await FlashSnake();
        _snake.Length = Snake.InitialLenght;
        _snake.Speed = Snake.InitialSpeed;
        _winningScore = _initialWinningScore;
        _gridSize = _initialGridSize;
        _level = 1;
        _score = 0;
        _movesCount = 0;
        PreparePlayingBoard();
        StateHasChanged();
        _turningEnabled = true;
    }

    private async Task FlashSnake()
    {
        for (int i = 0; i < 4; i++)
        {
            _snake.ChangeSnakeColor(GridColors.Red, _cells);
            StateHasChanged();
            await Task.Delay(150);

            _snake.ChangeSnakeColor(GridColors.Blue, _cells);
            StateHasChanged();
            await Task.Delay(150);
        }
    }

    private void DeleteKebabOrDecreaseKebabTimeLeft()
    {
        if (_cells.Any(GridColors.Kebab))
        {
            if (_kebabTimeLeft > 0)
            {
                _kebabTimeLeft--;
            }else
            {
                _cells.Get(_kebabCell.x, _kebabCell.y).Color = GridColors.Green;
            }
        }
    }

    private async Task WinLevel()
    {
        _isRunning = false;
        _turningEnabled = false;
        await SnakeGoingIntoHoleAnimation();

        for (int i = 0; i < 3; i++)
        {
            await _cells.MakeCellsGreen();
            StateHasChanged();
            await WriteCongrats();
            StateHasChanged();
        }

        await Task.Delay(1000);
        await CountdownAnimation();
        _level++;
        _score = _winningScore;
        _winningScore = 3 * _winningScore;
        _gridSize = Convert.ToInt32(Math.Round(1.3 * _gridSize, 0,mode: MidpointRounding.ToPositiveInfinity));
        PreparePlayingBoard();
    }

    private async Task SnakeGoingIntoHoleAnimation()
    {
        _cells.Get(_snake.Head.x, _snake.Head.y).Color = GridColors.Hole;
        switch (_snake.HeadDirection)
        {
            case Directions.Up:
                _cells.Get(_snake.SnakeCells[1].x, _snake.SnakeCells[1].y).Color = GridColors.EyesUp;
                break;

            case Directions.Down:
                _cells.Get(_snake.SnakeCells[1].x, _snake.SnakeCells[1].y).Color = GridColors.EyesDown;
                break;

            case Directions.Left:
                _cells.Get(_snake.SnakeCells[1].x, _snake.SnakeCells[1].y).Color = GridColors.EyesLeft;
                break;

            case Directions.Right:
                _cells.Get(_snake.SnakeCells[1].x, _snake.SnakeCells[1].y).Color = GridColors.EyesRight;
                break;
        }
        
        StateHasChanged();
        await Task.Delay(2000);

        _cells.Get(_snake.SnakeCells[1].x, _snake.SnakeCells[1].y).Color = GridColors.Blue;
        for (int i = _snake.Length-1; i >0 ; i--)
        {
            _cells.Get(_snake.SnakeCells[i].x, _snake.SnakeCells[i].y).Color = GridColors.Green;
            StateHasChanged();
            await Task.Delay(100);
        }
    }

    private async Task WriteCongrats()
    {
        var middle = new Cell(){
            x = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity)),
            y = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity))
        };
        string inscription = "CONGRATS";

        for (int i = -4, j=0; i < 4; i++, j++)
        {
            _cells.Get(middle.x + i, middle.y+4).Color = inscription[j].ToString() + ".png";
            StateHasChanged();
            await Task.Delay(80);
        }
        _cells.Get(middle.x + 4, middle.y + 4).Color = Letters.ExclamationMark;
        StateHasChanged();
        await Task.Delay(150);

    }

    private async Task CountdownAnimation()
    {
        var middle = new Cell(){
            x = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity)),
            y = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity))
        };

        string inscription = "LEVEL";

        for (int i = -5, j = 0; i < 0; i++, j++)
        {
            _cells.Get(middle.x + i, middle.y + 2).Color = inscription[j].ToString() + ".png";
        }
        _cells.Get(middle.x + 1, middle.y + 2).Color = "2.png";

        inscription = "FOR";

        for (int i = 3, j = 0; i < 6; i++, j++)
        {
            _cells.Get(middle.x + i, middle.y + 2).Color = inscription[j].ToString() + ".png";
        }

        StateHasChanged();
        await Task.Delay(2000);

        var cellsToChange = new List<Cell>()
        {
            new Cell {x = middle.x, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-1, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y , Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-3, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-4, Color = GridColors.Yellow}
        };

        foreach (var cell in cellsToChange)
        {
            _cells.Get(cell.x, cell.y).Color = cell.Color;
        }

        StateHasChanged();
        await Task.Delay(1000);
        cellsToChange.Clear();

        cellsToChange.AddRange(new List<Cell>()
        {
            new Cell {x = middle.x, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-1, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-4, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-2, Color = GridColors.Yellow},
            new Cell {x = middle.x-1, y = middle.y-3, Color = GridColors.Yellow},
            new Cell {x = middle.x+1, y = middle.y-3, Color = GridColors.Green},
        });

        foreach (var cell in cellsToChange)
        {
            _cells.Get(cell.x, cell.y).Color = cell.Color;
        }
        StateHasChanged();
        await Task.Delay(1000);
        cellsToChange.Clear();

        cellsToChange.AddRange(new List<Cell>()
        {
            new Cell {x = middle.x-1, y = middle.y, Color = GridColors.Green},
            new Cell {x = middle.x, y = middle.y, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-2, Color = GridColors.Green},
            new Cell {x = middle.x, y = middle.y-2, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-2, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-3, Color = GridColors.Green},
            new Cell {x = middle.x-1, y = middle.y-4, Color = GridColors.Green},
            new Cell {x = middle.x, y = middle.y-4, Color = GridColors.Green},
            new Cell {x = middle.x+1, y = middle.y-3, Color = GridColors.Yellow},
            
        });

        foreach (var cell in cellsToChange)
        {
            _cells.Get(cell.x, cell.y).Color = cell.Color;
        }

        StateHasChanged();
        await Task.Delay(1000);

        _cells.MakeCellsGreen();
        StateHasChanged();
    }

}
