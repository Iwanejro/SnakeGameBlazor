@page "/snake"
@using Microsoft.AspNetCore.Components;
@using SnakeGameBlazor.Data;
@using SnakeGameBlazor.Constants;
@using System.Linq;

<PageTitle>Snake</PageTitle>
<div class="containter" @onkeydown="ChangeDirection" tabindex="0">
    <div class="">
        
        <div class="row align-items-center">
            <div class="col-6">
                <table style="border-collapse: collapse; border-spacing: 0;">
                @for (int i = _gridSize; i > 0; i--)
                {
                    <tr>
                        @for (int j = 0; j < _gridSize; j++)
                        {
                            <td style="padding:0">
                                <img src=@("/images/"+ _cells[j,i-1]) class="img-fluid m-0 p-0 g-0" style="margin: 0 auto;display:block;"/>
                            </td>
                        }
                    </tr>
                }
                </table>
            </div>
            
            <div class="col-6 text-center">
                <br />
                <h3>Level 1</h3>
                <br /><br />
                <h1 class="mb-0 fw-bold">SCORE</h1>
                <h1 class="mt-0 fw-bold">@_score</h1>
                <br /><br />
                <h3>Next level for:</h3>
                <h3>@(100 - _score)</h3>
            </div>
        </div>
    </div>
    <br /><br />
</div>

@code {
    private string _direction;
    private string _snakeHeadDirection;
    private const int _gridSize = 13; // size/2 == 0 !!!
    private int _kebabFrequency = 10;
    private int _score;
    private int _movesCount;
    private int _kebabTimeLeft;
    private Cell _kebabCell = new Cell();
    private string[,] _cells = new string[_gridSize, _gridSize];
    private bool _isRunning;
    private bool _turningEnabled = true;
    private Snake _snake = new Snake();
    private List<Cell> _edge = new List<Cell>();


    async Task PlaySnake()
    {
        _isRunning = true;

        while (_isRunning)
        {
            await Task.Delay(200);

            await NextAction();

            StateHasChanged();
        }
    }

    protected async override void OnInitialized()
    {
        await MakeCellsGreen();
        InitializeEdge();
        InitializeSnake();
        SpawnFood(GridColors.Beer);
    }

    async Task NextAction()
    {
        MoveSnakeBody();

        MoveSnakeHead();

        CheckSnakeHeadPosition();

        if (_isRunning)
        {
            for (int i = 1; i < _snake.Length; i++)
            {
                _cells[_snake.Cells[i].x, _snake.Cells[i].y] = GridColors.Blue;
            }

            ChangeSnakeHeadPicture();

            _movesCount++;
            DeleteKebabOrDecreaseKebabTimeLeft();
        }
    }

    private async void ChangeDirection(KeyboardEventArgs e)
    {
        if (_turningEnabled)
        {
            switch (e.Key)
            {
                case Directions.ArrowUp:
                    if (_snakeHeadDirection != Directions.Down || !_isRunning)
                    {
                        _direction = Directions.Up;
                    }
                    break;

                case Directions.ArrowDown:
                    if (_snakeHeadDirection != Directions.Up || !_isRunning)
                    {
                        _direction = Directions.Down;
                    }
                    break;

                case Directions.ArrowLeft:
                    if (_snakeHeadDirection != Directions.Right || !_isRunning)
                    {
                        _direction = Directions.Left;
                    }
                    break;

                case Directions.ArrowRight:
                    if (_snakeHeadDirection != Directions.Left || !_isRunning)
                    {
                        _direction = Directions.Right;
                    }
                    break;
            }

            if (!_isRunning)
                await PlaySnake();
        }

    }

    private void InitializeSnake()
    {
        if (_snake.Cells.Count != 0)
        {
            _snake.Cells.RemoveAll(c => c.x >= -1);
        }
        _snake.Length = 3;
        _snake.Head.x = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToEven));
        _snake.Head.y = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToEven));

        for (int i = 0; i < _snake.Length; i++)
        {
            _snake.Cells.Add(new Cell
            {
                x = _snake.Head.x,
                y = _snake.Head.y
            });

            _cells[_gridSize / 2, _gridSize / 2] = GridColors.Blue;
        }

        _snake.Tail.x = _snake.Head.x;
        _snake.Tail.y = _snake.Head.y;

        _cells[_snake.Head.x, _snake.Head.y] = GridColors.EyesDown;

    }

    private async Task MakeCellsGreen()
    {
        for (int i = 1; i < _gridSize - 1; i++)
        {
            for (int j = 1; j < _gridSize - 1; j++)
            {
                _cells[i, j] = GridColors.Green;
            }
        }
    }

    private void InitializeEdge()
    {
        if (_edge.Count > 0)
        {
            _edge.RemoveAll(c => c.x >= -1);
        }

        for (int i = 0; i < _gridSize; i++)
        {
            var cells = new List<Cell>
            {
                new Cell {x = i, y = 0},
                new Cell {x = 0, y = i},
                new Cell {x = _gridSize-1, y = i},
                new Cell {x = i, y = _gridSize-1}
            };
            _edge.AddRange(cells);
        }

        foreach (var edgeCell in _edge)
        {
            _cells[edgeCell.x, edgeCell.y] = GridColors.Black;
        }
    }

    private void MoveSnakeBody()
    {
        _snake.Tail.x = _snake.Cells[_snake.Length - 1].x;
        _snake.Tail.y = _snake.Cells[_snake.Length - 1].y;

        for (int i = _snake.Length - 1; i > 0; i--)
        {
            _snake.Cells[i].x = _snake.Cells[i - 1].x;
            _snake.Cells[i].y = _snake.Cells[i - 1].y;
        }
    }

    private void MoveSnakeHead()
    {
        switch (_direction)
        {
            case Directions.Up:
                _snake.Cells[0].y = _snake.Cells[0].y + 1;
                _snakeHeadDirection = Directions.Up;
                break;

            case Directions.Down:
                _snake.Cells[0].y = _snake.Cells[0].y - 1;
                _snakeHeadDirection = Directions.Down;
                break;

            case Directions.Left:
                _snake.Cells[0].x = _snake.Cells[0].x - 1;
                _snakeHeadDirection = Directions.Left;
                break;

            case Directions.Right:
                _snake.Cells[0].x = _snake.Cells[0].x + 1;
                _snakeHeadDirection = Directions.Right;
                break;
        }
        _snake.Head.x = _snake.Cells[0].x;
        _snake.Head.y = _snake.Cells[0].y;

    }

    private async void CheckSnakeHeadPosition()
    {
        switch (_cells[_snake.Head.x, _snake.Head.y])
        {
            case GridColors.Blue:
            case GridColors.Black:
            case GridColors.EyesDown:
            case GridColors.EyesUp:
            case GridColors.EyesLeft:
            case GridColors.EyesRight:
                GameOver();
                break;

            case GridColors.Beer:
                MakeSnakeLonger();

                if (_score>=5)
                {
                    WinLevel();
                }
                else if (_score%_kebabFrequency == 0)
                {
                    SpawnFood(GridColors.Kebab);
                    _kebabTimeLeft = 2*_gridSize;
                }
                SpawnFood(GridColors.Beer);
                break;

            case GridColors.Kebab:
                _score += 10;
                _cells[_snake.Tail.x, _snake.Tail.y] = GridColors.Green;
                break;

            case GridColors.Green:
                _cells[_snake.Tail.x, _snake.Tail.y] = GridColors.Green;
                break;
        }
    }

    private void SpawnFood(string foodName)
    {
        var generator = new Random();
        var foodCell = new Cell
            {
                x = generator.Next(1, _gridSize-2),
                y = generator.Next(1, _gridSize-2)
            };
        while (_snake.Cells.Any(snakeCell => snakeCell.x == foodCell.x && snakeCell.y == foodCell.y) || _cells[foodCell.x, foodCell.y] == GridColors.Beer)
        {
            foodCell.x = generator.Next(1, _gridSize - 2);
            foodCell.y = generator.Next(1, _gridSize - 2);
        }

        _cells[foodCell.x, foodCell.y] = foodName;

        if (foodName == GridColors.Kebab)
        {
            _kebabCell.x = foodCell.x;
            _kebabCell.y = foodCell.y;
        }
    }

    private void MakeSnakeLonger()
    {
        _snake.Cells.Add(new Cell
            {
                x = _snake.Tail.x,
                y = _snake.Tail.y
            });
        _snake.Length++;
        _score++;
    }


    private async void GameOver()
    {
        _isRunning = false;
        _turningEnabled = false;
        await FlashSnake();
        OnInitialized();
        StateHasChanged();
        _score = 0;
        _turningEnabled = true;
    }

    private async Task FlashSnake()
    {
        for (int i = 0; i < 4; i++)
        {
            MakeSnakeRed();
            StateHasChanged();
            await Task.Delay(150);

            MakeSnakeBlue();
            StateHasChanged();
            await Task.Delay(150);
        }
    }

    private void MakeSnakeRed()
    {
        foreach (var cell in _snake.Cells)
        {
            _cells[cell.x, cell.y] = GridColors.Red;
        }
        _cells[_snake.Tail.x, _snake.Tail.y] = GridColors.Red;
    }

    private void MakeSnakeBlue()
    {
        foreach (var cell in _snake.Cells)
        {
            _cells[cell.x, cell.y] = GridColors.Blue;
        }
        _cells[_snake.Tail.x, _snake.Tail.y] = GridColors.Blue;
    } 

    private void DeleteKebabOrDecreaseKebabTimeLeft()
    {
        if (_cells.Cast<string>().Any(cellValue => cellValue == GridColors.Kebab))
        {
            if (_kebabTimeLeft > 0)
            {
                _kebabTimeLeft--;
            }else
            {
                _cells[_kebabCell.x, _kebabCell.y] = GridColors.Green;
            }
        }
    }

    private void ChangeSnakeHeadPicture()
    {
        switch (_snakeHeadDirection)
        {
            case Directions.Up:
                _cells[_snake.Head.x, _snake.Head.y] = GridColors.EyesUp;
                break;

            case Directions.Down:
                _cells[_snake.Head.x, _snake.Head.y] = GridColors.EyesDown;
                break;

            case Directions.Left:
                _cells[_snake.Head.x, _snake.Head.y] = GridColors.EyesLeft;
                break;

            case Directions.Right:
                _cells[_snake.Head.x, _snake.Head.y] = GridColors.EyesRight;
                break;
        }
    }

    private async Task WinLevel()
    {
        _isRunning = false;
        _turningEnabled = false;
        await SnakeGoingIntoHoleAnimation();
        await MakeCellsGreen();
        StateHasChanged();
        await WriteCongrats();
    }

    private async Task SnakeGoingIntoHoleAnimation()
    {
        _cells[_snake.Head.x, _snake.Head.y] = GridColors.Hole;
        switch (_snakeHeadDirection)
        {
            case Directions.Up:
                _cells[_snake.Cells[1].x, _snake.Cells[1].y] = GridColors.EyesUp;
                break;

            case Directions.Down:
                _cells[_snake.Cells[1].x, _snake.Cells[1].y] = GridColors.EyesDown;
                break;

            case Directions.Left:
                _cells[_snake.Cells[1].x, _snake.Cells[1].y] = GridColors.EyesLeft;
                break;

            case Directions.Right:
                _cells[_snake.Cells[1].x, _snake.Cells[1].y] = GridColors.EyesRight;
                break;
        }
        StateHasChanged();
        await Task.Delay(2000);

        _cells[_snake.Cells[1].x, _snake.Cells[1].y] = GridColors.Blue;
        for (int i = _snake.Length-1; i >0 ; i--)
        {
            _cells[_snake.Cells[i].x, _snake.Cells[i].y] = GridColors.Green;
            StateHasChanged();
            await Task.Delay(100);
        }
    }

    private async Task WriteCongrats()
    {
        var middle = new Cell(){
            x = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity)),
            y = Convert.ToInt32(Math.Round((double)(_gridSize / 2), mode: MidpointRounding.ToNegativeInfinity))
        };
        string inscription = "CONGRATS";

        for (int i = -4, j=0; i < 4; i++, j++)
        {
            _cells[middle.x + i, middle.y] = inscription[j].ToString() + ".png";
            StateHasChanged();
            await Task.Delay(100);
        }
        _cells[middle.x + 4, middle.y] = Letters.ExclamationMark;
        StateHasChanged();

    }

    private async Task CountdownAnimation()
    {
        
    }
}
