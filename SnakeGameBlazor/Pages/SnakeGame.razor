@page "/snake"
@using Microsoft.AspNetCore.Components;
@using SnakeGameBlazor.Data;
@using SnakeGameBlazor.Constants;

<PageTitle>Snake</PageTitle>
<div class="containter" @onkeydown="ChangeDirection" tabindex="0">

    <h1>Snake</h1>

    <p>Current direction: @_direction</p>

    <div class="container">
        <div class="row align-items-center">
            <div class="col-12 custom-no-spaces">
                @for (int i = _gridSize; i > 0; i--)
                {
                    <div class="row">
                        @for (int j = 0; j < _gridSize; j++)
                        {
                            <div class="col p-0 m-0">
                                <img src=@("/images/"+ _cells[j,i-1] + ".png") class="img-fluid custom-no-spaces" />
                            </div>
                        }
                    </div>
                }
            </div>
            @*<div class="container col-4">
                <table>
                    <tr>
                        <td>
                        </td>
                        <td>
                            <button class="btn btn-primary w-100" @onclick="GoUp">Up</button>
                        </td>
                        <td>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button class="btn btn-primary w-100" @onclick="GoLeft">Left</button>
                        </td>
                        <td>
                            <button class="btn btn-primary w-100" @onclick="GoDown">Down</button>
                        </td>
                        <td>
                            <button class="btn btn-primary w-100" @onclick="GoRight">Right</button>
                        </td>
                    </tr>
                </table>
            </div>*@
        </div>
    </div>
</div>

@code {
    private string _direction;
    private string _snakeHeadDirection;
    private const int _gridSize = 20;
    private string[,] _cells = new string[_gridSize, _gridSize];
    private bool _isRunning;
    private bool _turningEnabled;
    private Snake _snake = new Snake();

    protected override void OnInitialized()
    {
        for (int i = 0; i < _gridSize; i++)
        {
            for (int j = 0; j < _gridSize; j++)
            {
                _cells[i, j] = GridColors.Green;
            }
        }
        InitializeSnake();
        SpawnFood();
    }

    async Task PlaySnake()
    {
        _isRunning = true;

        while (true)
        {

            await Task.Delay(100);

            await NextAction();

            StateHasChanged();
        }
    }

    async Task NextAction()
    {
        var snakeTail = new Cell
        {
            x = _snake.Cells[_snake.Length-1].x,
            y = _snake.Cells[_snake.Length-1].y
        };

        MoveSnakeBody();

        MoveSnakeHead();

        MakeSnakeLongerOrTurnTailIntoGround(snakeTail);

        foreach (var cell in _snake.Cells)
        {
            _cells[cell.x, cell.y] = GridColors.Blue;
        }
    }

    private async void ChangeDirection(KeyboardEventArgs e)
    {
        if (!_isRunning)
            _turningEnabled = true;

        if (_turningEnabled)
        {
            switch (e.Key)
            {
                case Directions.ArrowUp:
                    if (_snakeHeadDirection != Directions.Down)
                    {
                        _direction = Directions.Up;
                    }
                    break;

                case Directions.ArrowDown:
                    if (_snakeHeadDirection != Directions.Up)
                    {
                        _direction = Directions.Down;
                    }
                    break;

                case Directions.ArrowLeft:
                    if (_snakeHeadDirection != Directions.Right)
                    {
                        _direction = Directions.Left;
                    }
                    break;

                case Directions.ArrowRight:
                    if (_snakeHeadDirection != Directions.Left)
                    {
                        _direction = Directions.Right;
                    }
                    break;
            }
        }

        if (!_isRunning)
            await PlaySnake();
    }

    private void InitializeSnake()
    {
        _snake.Length = 3;

        for (int i = 0; i < _snake.Length; i++)
        {
            _snake.Cells.Add(new Cell
            {
                x = _gridSize / 2 + i,
                y = _gridSize / 2
            });

            _cells[_gridSize / 2 + i, _gridSize / 2] = GridColors.Blue;
        }
    }

    private void MoveSnakeBody()
    {
        for (int i = _snake.Length - 1; i > 0; i--)
        {
            _snake.Cells[i].x = _snake.Cells[i - 1].x;
            _snake.Cells[i].y = _snake.Cells[i - 1].y;
        }
    }

    private void MoveSnakeHead()
    {
        switch (_direction)
        {
            case Directions.Up:
                _snake.Cells[0].y = _snake.Cells[0].y + 1;
                _snakeHeadDirection = Directions.Up;
                break;

            case Directions.Down:
                _snake.Cells[0].y = _snake.Cells[0].y - 1;
                _snakeHeadDirection = Directions.Down;
                break;

            case Directions.Left:
                _snake.Cells[0].x = _snake.Cells[0].x - 1;
                _snakeHeadDirection = Directions.Left;
                break;

            case Directions.Right:
                _snake.Cells[0].x = _snake.Cells[0].x + 1;
                _snakeHeadDirection = Directions.Right;
                break;
        }
        
    }

    private void SpawnFood()
    {
        var generator = new Random();
        var foodCell = new Cell
            {
                x = generator.Next(0, _gridSize-1),
                y = generator.Next(0, _gridSize-1)
            };
        while (_snake.Cells.Any(snakeCell => snakeCell.x == foodCell.x && snakeCell.y == foodCell.y))
        {
            foodCell.x = generator.Next(0, 9);
            foodCell.y = generator.Next(0, 9);
        }
        _cells[foodCell.x, foodCell.y] = GridColors.Beer;
    }

    private void MakeSnakeLongerOrTurnTailIntoGround(Cell snakeTail)
    {
        if (_cells[_snake.Cells[0].x, _snake.Cells[0].y] == GridColors.Beer)
        {
            _snake.Cells.Add(new Cell
                {
                    x = snakeTail.x,
                    y = snakeTail.y
                });
            _snake.Length++;
            SpawnFood();
        }
        else
        {
            _cells[snakeTail.x, snakeTail.y] = GridColors.Green;
        }
    }
}
